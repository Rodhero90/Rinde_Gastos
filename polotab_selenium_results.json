{
  "url": "https://developer.polotab.com/",
  "title": "PoloTab | API Documentation",
  "sections": {},
  "endpoints": [
    "DELETE /menus/v1/items/{item_id}/modifier_groups/{modifier_group_id}",
    "/v1/menus/{menu_id}/modifier_groups/{modifier_group_id}",
    "DELETE /menus/v1/menu_groups/{menu_group_id}",
    "POST /menus/v1/menus",
    "/v1/taxes",
    "PUT /menus/v1/size_groups/{size_group_id}",
    "POST /menus/v1/menu_groups/{menu_group_id}/menus/{menu_id}/sorting_order",
    "POST /menus/v1/menus/{menu_id}/items/{item_id}",
    "/v1/orders/{order_id}",
    "GET /menus/v1/unavailable_entities",
    "GET /menus/v1/menus",
    "GET /virtual_locations/v1/virtual_locations/{virtual_location_id}",
    "DELETE /virtual_locations/v1/virtual_locations/{virtual_location_id}/app",
    "POST /virtual_locations/v1/virtual_locations/{virtual_location_id}/app",
    "PUT /virtual_locations/v1/virtual_locations/{virtual_location_id}/app",
    "/v1/menu_groups/{menu_group_id}/menus/{menu_id}/sorting_order",
    "PUT /menus/v1/menus/{menu_id}",
    "POST /menus/v1/items/{item_id}/modifier_groups/{modifier_group_id}",
    "POST /virtual_locations/v1/virtual_locations",
    "/v1/orders/{order_id}/void",
    "POST /menus/v1/unavailable_entities",
    "/v1/modifier_groups/{modifier_group_id}/modifier_items",
    "PUT /menus/v1/items/{item_id}",
    "/v1/channels",
    "DELETE /orders/v1/orders/{order_id}",
    "/v1/restaurants/token',",
    "/v1/virtual_locations",
    "PUT /menus/v1/size_groups/{size_group_id}/sizes",
    "/v1/menu_groups/{menu_group_id}/menus/{menu_id}",
    "/v1/modifier_groups/{modifier_group_id}/modifier_items/{item_id}",
    "/v1/menu_groups/{menu_group_id}",
    "/v1/menus",
    "DELETE /menus/v1/size_groups/{size_group_id}/items",
    "/v1/channels/{channel_id}/menus",
    "GET /virtual_locations/v1/virtual_locations",
    "/v1/restaurant",
    "/v1/modifier_groups",
    "POST /orders/v1/orders",
    "DELETE /menus/v1/menus/{menu_id}/items/{item_id}",
    "DELETE /menus/v1/menu_groups/{menu_group_id}/menus/{menu_id}",
    "/auth/v1/restaurants/token',",
    "DELETE /virtual_locations/v1/virtual_locations/{virtual_location_id}",
    "/v1/notifications",
    "DELETE /menus/v1/menus/{menu_id}",
    "/v1/orders",
    "POST /menus/v1/modifier_groups",
    "DELETE /menus/v1/unavailable_entities/{unavailable_entitiy_id}",
    "PUT /menus/v1/modifier_groups/{modifier_group_id}/modifier_items/{item_id}",
    "post /auth/v1/restaurants/token)",
    "GET /menus/v1/menu_groups",
    "PUT /menus/v1/menu_groups/{menu_group_id}",
    "GET /menus/v1/size_groups/{size_group_id}",
    "POST /orders/v1/orders/{order_id}/finalize",
    "/v1/orders/{order_id}/publish",
    "/v1/orders/{order_id}/finalize",
    "/v1/menus/{menu_id}",
    "GET /menus/v1/unavailable_entities/{unavailable_entitiy_id}",
    "/v1/menus/bulk",
    "GET /menus/v1/modifier_groups",
    "DELETE /menus/v1/items/{item_id}",
    "PUT /virtual_locations/v1/virtual_locations/{virtual_location_id}",
    "POST /orders/v1/orders/{order_id}/void",
    "GET /menus/v1/channels",
    "POST /menus/v1/size_groups/{size_group_id}/items",
    "POST /orders/v1/orders/{order_id}/publish",
    "GET /menus/v1/items",
    "POST /menus/v1/menus/bulk",
    "GET /socket/v1/clients",
    "GET /orders/v1/orders/{order_id}",
    "/v1/clients",
    "/v1/size_groups",
    "/v1/unavailable_entities",
    "/v1/virtual_locations/{virtual_location_id}",
    "/v1/menu_groups",
    "/v1/items/{item_id}",
    "POST /menus/v1/size_groups/{size_group_id}/sizes",
    "/v1/items/{item_id}/modifier_groups/{modifier_group_id}",
    "DELETE /menus/v1/size_groups/{size_group_id}",
    "POST /menus/v1/menus/{menu_id}/modifier_groups/{modifier_group_id}",
    "DELETE /menus/v1/size_groups/{size_group_id}/sizes",
    "/v1/virtual_locations/{virtual_location_id}/app",
    "/v1/items",
    "/v1/menus/{menu_id}/items/{item_id}",
    "GET /menus/v1/menus/{menu_id}",
    "POST /menus/v1/menus/{menu_id}/items",
    "/v1/schedules",
    "GET /orders/v1/orders",
    "GET /menus/v1/items/{item_id}",
    "POST /menus/v1/menu_groups",
    "/v1/size_groups/{size_group_id}/sizes/sorting_order",
    "GET /restaurants/v1/restaurant",
    "GET /menus/v1/modifier_groups/{modifier_group_id}/modifier_items/{item_id}",
    "POST /menus/v1/items",
    "/v1/size_groups/{size_group_id}",
    "POST /notifications/v1/notifications",
    "/v1/restaurants/token",
    "GET /menus/v1/schedules",
    "/v1/size_groups/{size_group_id}/sizes",
    "POST /auth/v1/restaurants/token",
    "/v1/menus/{menu_id}/items",
    "GET /menus/v1/modifier_groups/{modifier_group_id}/modifier_items",
    "/auth/v1/restaurants/token",
    "PUT /menus/v1/schedules",
    "POST /menus/v1/size_groups",
    "/v1/unavailable_entities/{unavailable_entitiy_id}",
    "PUT /menus/v1/unavailable_entities/{unavailable_entitiy_id}",
    "POST /menus/v1/size_groups/{size_group_id}/sizes/sorting_order",
    "GET /menus/v1/size_groups",
    "GET /menus/v1/taxes",
    "/v1/restaurants/token)",
    "GET /menus/v1/channels/{channel_id}/menus",
    "/auth/v1/restaurants/token)",
    "GET /menus/v1/menu_groups/{menu_group_id}",
    "/v1/size_groups/{size_group_id}/items"
  ],
  "authentication_info": {
    "endpoint_found": true,
    "context": "In order to make any requests to the PoloTab API, you must first authenticate your requests using a restaurant's bearer token. This token is unique to each restaurant and app. So if your app manages multiple restaurants, you will need to generate a bearer token for each restaurant.\nThis endpoint provides a way to generate a new restaurant's bearer token using the app's API key. In order to generate a restaurant's bearer token, the restaurant must first install your app. Once installed, you will be notified via webhook so you can obtain the bearer token using the endpoint below.\nAUTHENTICATION\nOPERATIONS\nPOST\n/auth/v1/restaurants/token\nGet restaurant access token\nGenerates a token for restaurant access. The app must be authenticated and have access to the requested restaurant.\nUse your app's API key to authenticate the request.\nThe generated token is valid for 7 days from the time it is generated. Once the token expires, the app must generate a new token using this same endpoint.\nHeaders\nAuthorization\nType:\nstring\nrequired"
  },
  "menu_items": [
    "Expand PoloTab API\nPoloTab API\nCollapse Authentication\nAuthentication\nGet restaurant access token\nHTTP Method: \nPOST\nExpand Restaurants\nRestaurants\nExpand Virtual locations\nVirtual locations\nExpand Orders\nOrders\nExpand Items\nItems\nExpand Menu\nMenu\nExpand Modifier groups\nModifier groups\nExpand Size groups\nSize groups\nExpand Menu groups\nMenu groups\nExpand Taxes\nTaxes\nExpand Channels\nChannels\nExpand Schedules\nSchedules\nExpand Unavailable entities\nUnavailable entities\nExpand Socket\nSocket\nExpand Notifications\nNotifications",
    "Open Search\nSearch\nKEYBOARD SHORTCUT:\n⌘ K\nExpand PoloTab API\nPoloTab API\nCollapse Authentication\nAuthentication\nGet restaurant access token\nHTTP Method: \nPOST\nExpand Restaurants\nRestaurants\nExpand Virtual locations\nVirtual locations\nExpand Orders\nOrders\nExpand Items\nItems\nExpand Menu\nMenu\nExpand Modifier groups\nModifier groups\nExpand Size groups\nSize groups\nExpand Menu groups\nMenu groups\nExpand Taxes\nTaxes\nExpand Channels\nChannels\nExpand Schedules\nSchedules\nExpand Unavailable entities\nUnavailable entities\nExpand Socket\nSocket\nExpand Notifications\nNotifications",
    "Open Search\nSearch\nKEYBOARD SHORTCUT:\n⌘ K\nExpand PoloTab API\nPoloTab API\nCollapse Authentication\nAuthentication\nGet restaurant access token\nHTTP Method: \nPOST\nExpand Restaurants\nRestaurants\nExpand Virtual locations\nVirtual locations\nExpand Orders\nOrders\nExpand Items\nItems\nExpand Menu\nMenu\nExpand Modifier groups\nModifier groups\nExpand Size groups\nSize groups\nExpand Menu groups\nMenu groups\nExpand Taxes\nTaxes\nExpand Channels\nChannels\nExpand Schedules\nSchedules\nExpand Unavailable entities\nUnavailable entities\nExpand Socket\nSocket\nExpand Notifications\nNotifications\nV1.0.0\nOAS 3.0.0\nPublic API PoloTab\nDownload OpenAPI Document\nPoloTab API\nOverview\nPoloTab is a powerful restaurant management platform designed for all kinds of food and beverage establishments ranging from single location coffee shops to multi-location and multi-brand chains. Our API enables management of restaurant operations, from table sessions to menu management.\nKey Features\nRestaurant Management: Manage multiple restaurants under a single group\nOrder Management: Listen, update and create orders in real-time\nMenu Management: Update restaurant menus\nAPIs Coming Soon\nCash Register Management: Real-time cash register operations\nInventory Management: Real-time inventory operations\nEmployee Management: Manage employees and their clocking in and out\nPayment Processing: Handle customer orders efficiently\nTools Coming Soon\nPOS Simulator: Simulate a POS environment\nDeveloper Console: Self-service portal for developers to create apps, manage API keys and register webhooks\nGetting Started\nTo integrate with PoloTab's restaurant management system, please contact our team at developer-support@polotab.com to request API access so we can provide you with the necessary credentials as well as a test account.\nBase URL\nhttps://api.polotab.com/\nSupport\nFor technical support or questions about our restaurant management API:\nEmail: developer-support@polotab.com\nAPI Documentation: https://developer.polotab.com\n2025 PoloPay Inc. All rights reserved.\nServer\nServer:\nhttps://api.polotab.com\nAuthentication\nRestaurantToken Required\nSelected Auth Type:\nRestaurantToken\nBearer Token for authentication with the restaurant's API token\nBearer Token\n:\nShow Password\nClient Libraries\nShell\nRuby\nNode.js\nPHP\nPython\nLibcurl\nHttpClient\nRestSharp\nclj-http\nHttp\nNewRequest\nHTTP/1.1\nAsyncHttp\njava.net.http\nOkHttp\nUnirest\nFetch\nAxios\nofetch\njQuery\nXHR\nOkHttp\nFetch\nAxios\nofetch\nundici\nNSURLSession\nCohttp\ncURL\nGuzzle\nInvoke-WebRequest\nInvoke-RestMethod\nhttp.client\nRequests\nHTTPX (Sync)\nHTTPX (Async)\nhttr\nnet::http\nCurl\nWget\nHTTPie\nNSURLSession\nMore\nSelect from all clients\nFetch Node.js\nAuthentication\nIn order to make any requests to the PoloTab API, you must first authenticate your requests using a restaurant's bearer token. This token is unique to each restaurant and app. So if your app manages multiple restaurants, you will need to generate a bearer token for each restaurant.\nThis endpoint provides a way to generate a new restaurant's bearer token using the app's API key. In order to generate a restaurant's bearer token, the restaurant must first install your app. Once installed, you will be notified via webhook so you can obtain the bearer token using the endpoint below.\nAUTHENTICATION\nOPERATIONS\nPOST\n/auth/v1/restaurants/token\nGet restaurant access token\nGenerates a token for restaurant access. The app must be authenticated and have access to the requested restaurant.\nUse your app's API key to authenticate the request.\nThe generated token is valid for 7 days from the time it is generated. Once the token expires, the app must generate a new token using this same endpoint.\nHeaders\nAuthorization\nType:\nstring\nrequired\nExample\nAPI Key for application authentication using Bearer format\nBody\nrequired\napplication/json\nrestaurantId\nType:\nstring\nFormat:\nuuid\nrequired\nID of the restaurant to generate token for\nResponses\n200\nSuccessful response\n401\nUnauthorized\n500\nServer error\nRequest Example for\nPOST\n/auth/v1/restaurants/token\nSelected HTTP client:\nNode.js Fetch\nLibcurl\nHttpClient\nRestSharp\nclj-http\nHttp\nNewRequest\nHTTP/1.1\nAsyncHttp\njava.net.http\nOkHttp\nUnirest\nFetch\nAxios\nofetch\njQuery\nXHR\nOkHttp\nFetch\nAxios\nofetch\nundici\nNSURLSession\nCohttp\ncURL\nGuzzle\nInvoke-WebRequest\nInvoke-RestMethod\nhttp.client\nRequests\nHTTPX (Sync)\nHTTPX (Async)\nhttr\nnet::http\nCurl\nWget\nHTTPie\nNSURLSession\nfetch('https://api.polotab.com/auth/v1/restaurants/token', {\n  method: 'POST',\n  headers: {\n    Authorization: 'Bearer APP_API_KEY',\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    restaurantId: ''\n  })\n})\nTest Request\n(post /auth/v1/restaurants/token)\nSTATUS:\n200\nSTATUS:\n401\nSTATUS:\n500\nShow Schema\n{\n  \"token\": \"string\",\n  \"expiryDate\": \"2025-08-07T00:30:06.595Z\"\n}\nSuccessful response\nRestaurants\n(Collapsed)\nEndpoints for restaurant management.\nRestaurants represent physical locations. Restaurant entities belongs to a chain. Restaurant entities can have multiple child virtual locations.\nRESTAURANTS\nOPERATIONS\nGET\n/restaurants/v1/restaurant\nShow More\nVirtual locations\n(Collapsed)\nEndpoints for managing virtual locations.\nA virtual location is a digital-only restaurant presence that may operate from existing physical locations but maintain separate branding, menus, and operational workflows. Restaurants use virtual locations to manage their online presence, such as their website or mobile app. Most restaurants have a single virtual location that operates through multiple channels, however, some physical restaurants such as dark-kitchens may have multiple virtual locations that represent different brands.\nVIRTUAL LOCATIONS\nOPERATIONS\nPOST\n/virtual_locations/v1/virtual_locations\nGET\n/virtual_locations/v1/virtual_locations\nDELETE\n/virtual_locations/v1/virtual_locations/{virtual_location_id}\nGET\n/virtual_locations/v1/virtual_locations/{virtual_location_id}\nPUT\n/virtual_locations/v1/virtual_locations/{virtual_location_id}\nPOST\n/virtual_locations/v1/virtual_locations/{virtual_location_id}/app\nPUT\n/virtual_locations/v1/virtual_locations/{virtual_location_id}/app\nDELETE\n/virtual_locations/v1/virtual_locations/{virtual_location_id}/app\nShow More\nOrders\n(Collapsed)\nEndpoints for comprehensive order management throughout the entire lifecycle. These APIs support order creation, modification, status updates, fulfillment tracking, and historical order data. They handle various order types including dine-in, takeout, delivery, and catering orders.\nORDERS\nOPERATIONS\nGET\n/orders/v1/orders\nPOST\n/orders/v1/orders\nGET\n/orders/v1/orders/{order_id}\nDELETE\n/orders/v1/orders/{order_id}\nPOST\n/orders/v1/orders/{order_id}/publish\nPOST\n/orders/v1/orders/{order_id}/finalize\nPOST\n/orders/v1/orders/{order_id}/void\nShow More\nItems\n(Collapsed)\nEndpoints for managing individual menu items and their details.\nItems are the foundational building blocks of a restaurant's menu. Each item represents a specific product and/or modifier. Items within a menu act as a product, while items within a modifier group act as a modifier. An item can be both a product and a modifier depending on the context.\nThese APIs handle the creation and configuration of items.\nITEMS\nOPERATIONS\nPOST\n/menus/v1/items\nGET\n/menus/v1/items\nDELETE\n/menus/v1/items/{item_id}\nPUT\n/menus/v1/items/{item_id}\nGET\n/menus/v1/items/{item_id}\nShow More\nMenu\n(Collapsed)\nEndpoints for managing complete restaurant menus and their configurations.\nA menu is a collection of items such as \"Appetizers\", \"Entrees\", \"Desserts\", \"Beverages\", \"Sides\" etc.\nBy default, menus are inherited from parent entities. But can be hidden by the child entity through the visibility rules endpoints. For example, a menu created at the chain level by default will be visible at the restaurant and virtual location level.\nMENU\nOPERATIONS\nDELETE\n/menus/v1/menus/{menu_id}/items/{item_id}\nPOST\n/menus/v1/menus/{menu_id}/items/{item_id}\nPOST\n/menus/v1/menus/{menu_id}/items\nGET\n/menus/v1/channels/{channel_id}/menus\nGET\n/menus/v1/menus\nPOST\n/menus/v1/menus\nGET\n/menus/v1/menus/{menu_id}\nPUT\n/menus/v1/menus/{menu_id}\nDELETE\n/menus/v1/menus/{menu_id}\nPOST\n/menus/v1/menus/bulk\nShow More\nModifier groups\n(Collapsed)\nEndpoints for managing modifier groups and their configurations.\nModifier groups are used to group items (such as toppings, or preparation options) into logical groups that can be applied to menus and/or other items, enabling customization options for customers.\nThese APIs allow restaurants to create and organize modifier groups.\nMODIFIER GROUPS\nOPERATIONS\nPOST\n/menus/v1/modifier_groups\nGET\n/menus/v1/modifier_groups\nGET\n/menus/v1/modifier_groups/{modifier_group_id}/modifier_items\nPOST\n/menus/v1/menus/{menu_id}/modifier_groups/{modifier_group_id}\nPOST\n/menus/v1/items/{item_id}/modifier_groups/{modifier_group_id}\nDELETE\n/menus/v1/items/{item_id}/modifier_groups/{modifier_group_id}\nGET\n/menus/v1/modifier_groups/{modifier_group_id}/modifier_items/{item_id}\nPUT\n/menus/v1/modifier_groups/{modifier_group_id}/modifier_items/{item_id}\nShow More\nSize groups\n(Collapsed)\nEndpoints for managing size groups and their configurations.\nSize groups are used to group sizes (such as small, medium, large) into logical groups that can be applied to menus and/or other items, enabling customization options for customers.\nThese APIs allow restaurants to create and organize sizes and size groups.\nSIZE GROUPS\nOPERATIONS\nGET\n/menus/v1/size_groups\nPOST\n/menus/v1/size_groups\nGET\n/menus/v1/size_groups/{size_group_id}\nPUT\n/menus/v1/size_groups/{size_group_id}\nDELETE\n/menus/v1/size_groups/{size_group_id}\nPOST\n/menus/v1/size_groups/{size_group_id}/sizes\nDELETE\n/menus/v1/size_groups/{size_group_id}/sizes\nPUT\n/menus/v1/size_groups/{size_group_id}/sizes\nPOST\n/menus/v1/size_groups/{size_group_id}/sizes/sorting_order\nPOST\n/menus/v1/size_groups/{size_group_id}/items\nDELETE\n/menus/v1/size_groups/{size_group_id}/items\nShow More\nMenu groups\n(Collapsed)\nEndpoints for organizing menus into logical categories and sections.\nThese APIs allow restaurants to group menus (such as \"Appetizers\", \"Entrees\", \"Desserts\", \"Beverages\", \"Sides\") into broader groups such as \"Breakfast\", \"Lunch/Dinner\"\nMENU GROUPS\nOPERATIONS\nGET\n/menus/v1/menu_groups\nPOST\n/menus/v1/menu_groups\nDELETE\n/menus/v1/menu_groups/{menu_group_id}\nGET\n/menus/v1/menu_groups/{menu_group_id}\nPUT\n/menus/v1/menu_groups/{menu_group_id}\nDELETE\n/menus/v1/menu_groups/{menu_group_id}/menus/{menu_id}\nPOST\n/menus/v1/menu_groups/{menu_group_id}/menus/{menu_id}/sorting_order\nShow More\nTaxes\n(Collapsed)\nEndpoints for managing tax rules and their configurations.\nThese APIs allow restaurants to create and organize tax rules.\nTAXES\nOPERATIONS\nGET\n/menus/v1/taxes\nShow More\nChannels\n(Collapsed)\nEndpoints for managing sales and distribution channels such as POS, Web site, a delivery app, etc.\nThese APIs support the configuration of different service channels. They enable channel-specific menu offerings, pricing strategies, and operational workflows.\nCHANNELS\nOPERATIONS\nGET\n/menus/v1/channels\nShow More\nSchedules\n(Collapsed)\nEndpoints for configuring restaurant and virtual location schedules.\nThese APIs manage operating hours. They currently support only recurring schedules for restaurants and virtual locations.\nSCHEDULES\nOPERATIONS\nPUT\n/menus/v1/schedules\nGET\n/menus/v1/schedules\nShow More\nUnavailable entities\n(Collapsed)\nEndpoints for managing temporarily unavailable items.\nThese APIs handle the marking and tracking of items that are temporarily out of stock or unavailable. They support scheduled unavailability periods and automatic restoration of availability.\nUNAVAILABLE ENTITIES\nOPERATIONS\nGET\n/menus/v1/unavailable_entities\nPOST\n/menus/v1/unavailable_entities\nPUT\n/menus/v1/unavailable_entities/{unavailable_entitiy_id}\nDELETE\n/menus/v1/unavailable_entities/{unavailable_entitiy_id}\nGET\n/menus/v1/unavailable_entities/{unavailable_entitiy_id}\nShow More\nPush Notifications\n(Collapsed)\nEndpoints for managing POS push notifications.\nThese APIs allow you to push notifications to a specific terminal within a restaurant.\nShow More\nSocket\n(Collapsed)\nAll points of sale (POS) are connected to the PoloTab API using REST APIs as well as sockets.\nWhen an order is created, updated, or deleted, the API will notify the POS via a socket connection.\nThrough this APIs, you can check what points of sale are currently live and connected.\nSOCKET\nOPERATIONS\nGET\n/socket/v1/clients\nShow More\nNotifications\n(Collapsed)\nNOTIFICATIONS\nOPERATIONS\nPOST\n/notifications/v1/notifications\nShow More",
    "Open Search\nSearch\nKEYBOARD SHORTCUT:\n⌘ K\nExpand PoloTab API\nPoloTab API\nCollapse Authentication\nAuthentication\nGet restaurant access token\nHTTP Method: \nPOST\nExpand Restaurants\nRestaurants\nExpand Virtual locations\nVirtual locations\nExpand Orders\nOrders\nExpand Items\nItems\nExpand Menu\nMenu\nExpand Modifier groups\nModifier groups\nExpand Size groups\nSize groups\nExpand Menu groups\nMenu groups\nExpand Taxes\nTaxes\nExpand Channels\nChannels\nExpand Schedules\nSchedules\nExpand Unavailable entities\nUnavailable entities\nExpand Socket\nSocket\nExpand Notifications\nNotifications"
  ],
  "full_content_preview": "Open Search\nSearch\nKEYBOARD SHORTCUT:\n⌘ K\nExpand PoloTab API\nPoloTab API\nCollapse Authentication\nAuthentication\nGet restaurant access token\nHTTP Method: \nPOST\nExpand Restaurants\nRestaurants\nExpand Virtual locations\nVirtual locations\nExpand Orders\nOrders\nExpand Items\nItems\nExpand Menu\nMenu\nExpand Modifier groups\nModifier groups\nExpand Size groups\nSize groups\nExpand Menu groups\nMenu groups\nExpand Taxes\nTaxes\nExpand Channels\nChannels\nExpand Schedules\nSchedules\nExpand Unavailable entities\nUnavailable entities\nExpand Socket\nSocket\nExpand Notifications\nNotifications\nV1.0.0\nOAS 3.0.0\nPublic API PoloTab\nDownload OpenAPI Document\nPoloTab API\nOverview\nPoloTab is a powerful restaurant management platform designed for all kinds of food and beverage establishments ranging from single location coffee shops to multi-location and multi-brand chains. Our API enables management of restaurant operations, from table sessions to menu management.\nKey Features\nRestaurant Management: Manage multiple restaurants under a single group\nOrder Management: Listen, update and create orders in real-time\nMenu Management: Update restaurant menus\nAPIs Coming Soon\nCash Register Management: Real-time cash register operations\nInventory Management: Real-time inventory operations\nEmployee Management: Manage employees and their clocking in and out\nPayment Processing: Handle customer orders efficiently\nTools Coming Soon\nPOS Simulator: Simulate a POS environment\nDeveloper Console: Self-service portal for developers to create apps, manage API keys and register webhooks\nGetting Started\nTo integrate with PoloTab's restaurant management system, please contact our team at developer-support@polotab.com to request API access so we can provide you with the necessary credentials as well as a test account.\nBase URL\nhttps://api.polotab.com/\nSupport\nFor technical support or questions about our restaurant management API:\nEmail: developer-support@polotab.com\nAPI Documentation: https://developer.polotab.com\n2025 PoloPay Inc. All rights reserved.\nServer\nServer:\nhttps://api.polotab.com\nAuthentication\nRestaurantToken Required\nSelected Auth Type:\nRestaurantToken\nBearer Token for authentication with the restaurant's API token\nBearer Token\n:\nShow Password\nClient Libraries\nShell\nRuby\nNode.js\nPHP\nPython\nLibcurl\nHttpClient\nRestSharp\nclj-http\nHttp\nNewRequest\nHTTP/1.1\nAsyncHttp\njava.net.http\nOkHttp\nUnirest\nFetch\nAxios\nofetch\njQuery\nXHR\nOkHttp\nFetch\nAxios\nofetch\nundici\nNSURLSession\nCohttp\ncURL\nGuzzle\nInvoke-WebRequest\nInvoke-RestMethod\nhttp.client\nRequests\nHTTPX (Sync)\nHTTPX (Async)\nhttr\nnet::http\nCurl\nWget\nHTTPie\nNSURLSession\nMore\nSelect from all clients\nFetch Node.js\nAuthentication\nIn order to make any requests to the PoloTab API, you must first authenticate your requests using a restaurant's bearer token. This token is unique to each restaurant and app. So if your app manages multiple restaurants, you will need to generate a bearer token for each restaurant.\nThis endpoint provides a way to generate a new restaurant's bearer token using the app's API key. In order to generate a restaurant's bearer token, the restaurant must first install your app. Once installed, you will be notified via webhook so you can obtain the bearer token using the endpoint below.\nAUTHENTICATION\nOPERATIONS\nPOST\n/auth/v1/restaurants/token\nGet restaurant access token\nGenerates a token for restaurant access. The app must be authenticated and have access to the requested restaurant.\nUse your app's API key to authenticate the request.\nThe generated token is valid for 7 days from the time it is generated. Once the token expires, the app must generate a new token using this same endpoint.\nHeaders\nAuthorization\nType:\nstring\nrequired\nExample\nAPI Key for application authentication using Bearer format\nBody\nrequired\napplication/json\nrestaurantId\nType:\nstring\nFormat:\nuuid\nrequired\nID of the restaurant to generate token for\nResponses\n200\nSuccessful response\n401\nUnauthorized\n500\nServer error\nRequest Example for\nPOST\n/auth/v1/restaurants/token\nSelected HTTP client:\nNode.js Fetch\nLibcurl\nHttpClient\nRestSharp\nclj-http\nHttp\nNewRequest\nHTTP/1.1\nAsyncHttp\njava.net.http\nOkHttp\nUnirest\nFetch\nAxios\nofetch\njQuery\nXHR\nOkHttp\nFetch\nAxios\nofetch\nundici\nNSURLSession\nCohttp\ncURL\nGuzzle\nInvoke-WebRequest\nInvoke-RestMethod\nhttp.client\nRequests\nHTTPX (Sync)\nHTTPX (Async)\nhttr\nnet::http\nCurl\nWget\nHTTPie\nNSURLSession\nfetch('https://api.polotab.com/auth/v1/restaurants/token', {\n  method: 'POST',\n  headers: {\n    Authorization: 'Bearer APP_API_KEY',\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    restaurantId: ''\n  })\n})\nTest Request\n(post /auth/v1/restaurants/token)\nSTATUS:\n200\nSTATUS:\n401\nSTATUS:\n500\nShow Schema\n{\n  \"token\": \"string\",\n  \"expiryDate\": \"2025-08-07T00:30:06.595Z\"\n}\nSuccessful response\nRestaurants\n(Collapsed)\nEndpoints for restaurant management.\nRestaurants represent physical locations. Restaurant entities belongs to a chain. Restaurant entities can have multiple child virtual locations.\nRESTAURAN",
  "api_info": {
    "base_url_confirmed": true,
    "base_url": "https://api.polotab.com"
  }
}